#!/usr/bin/env node
import ve from"node:process";import{Command as et,Option as k}from"commander";import{join as Ze}from"node:path";import Qe from"chalk";import{dirname as qe,join as a,relative as He}from"node:path";import l from"fs-extra";import _ from"semver";import ue from"synp";import j from"semver";import Z from"@yarnpkg/lockfile";import{keyBy as Ve}from"lodash-es";import he from"node:crypto";import{createRequire as xe}from"node:module";import v,{dirname as be,resolve as Fe}from"node:path";import{fileURLToPath as _e}from"node:url";import Se from"node:os";import we from"chalk";import S from"fs-extra";import Le from"fast-glob";import N from"js-yaml";import{reduce as je}from"lodash-es";var Oe=Le.sync,Ae=xe(import.meta.url)("child_process"),{ensureDirSync:Re,readFileSync:Ee}=S,Ce=be(_e(import.meta.url)),u=(e,t,o,n=!1,r=!0,s=!1)=>{!n&&console.log(we.bold("invoke"),e,...t);let i=r?["inherit","inherit","inherit"]:[null,null,null],c=Ae.spawnSync(e,t,{cwd:o,stdio:i});if(!s&&(c.error||c.status))throw c;return String(c.stdout?.toString().trim())},Ye=(e,t,o,n)=>t!=="false"&&!o.includes(e)&&(n.length===0||n.includes(e)),$e=e=>(e.length===1?"-":"--")+e,De=e=>e.replace(/([\da-z]|(?=[A-Z]))([A-Z])/g,"$1-$2").toLowerCase(),V=e=>Object.keys(e).reduce((t,o)=>(t[De(o)]=e[o],t),{}),f=(e,...t)=>Object.keys(e).reduce((o,n)=>{let r=["_","--"],s=e[n],i=$e(n);return Ye(n,s,r,t)&&(o.push(i),s!==!0&&o.push(s)),o},[]),h=(e,t)=>je(e,(o,n,r)=>{let s=t[r],i=r,c=n;return s&&(typeof s=="string"?i=s:(i=s?.key??i,c=s?.value??s?.values?.[n]??c)),o[i]=c,o},{}),w=()=>process.platform==="win32"||/^(msys|cygwin)$/.test(process.env.OSTYPE),I=e=>e||(w()?"junction":"dir"),M=()=>w()?"yarn.cmd":"yarn",Pe=e=>z(`./node_modules/.bin/${e}`),G=(e="system",t=w())=>{let o=t?"npm.cmd":"npm";return e==="system"?o:e==="local"?Pe(o):e},B=(e,t)=>{let o=t.workspaces;return o&&o.packages&&(o=o.packages),!o||o.length===0?[]:Oe(o.map(n=>n.replace(/\/?$/,"/package.json")),{cwd:e,onlyFiles:!0,absolute:!0,gitignore:!0})},L=e=>JSON.parse(Ee(e).toString("utf-8").trim()),Ne=e=>(Re(e),e),J=(e,t)=>t?Ne(Fe(e,t)):S.mkdtempSync(v.join(Se.tmpdir(),`tempy-${he.randomBytes(16).toString("hex")}`)),U=e=>{try{return e()}catch{return null}},W=e=>{try{return N.load(e)}catch(t){throw new Error(`YAML required: ${t}`)}},q=N.dump,x=(e,t=process.cwd())=>u(e,["--version"],t,!0,!1),b=()=>L(z("package.json")),H=(e,t,o)=>Object.defineProperty(e,t,{value:o,enumerable:!1}),K=(e,t)=>{if(S.existsSync(v.join(e,t)))return e;let o=v.resolve(e,"..");return e===o?null:K(o,t)},z=(e,t=Ce)=>{let o=K(t,e);return o?v.join(o,e):null};var Q=e=>{let t=Z.parse(e);if(t.type!=="success")throw new Error("Merge conflict in yarn lockfile, aborting");return t.object},X=(e,t,o)=>(e.version=o,e.dependencies={},e.integrity="",e.resolved="",e),ee=e=>Z.stringify(e),te=(e,t,o)=>{let n=e.reporter==="npm"?o.npm:o.yarn,s=f(h(e,{"audit-level":"level",only:{key:"groups",values:{prod:"dependencies",dev:"devDependencies"}}}),"groups","verbose","level"),i=u(n,["audit","--json",...s],t,!!e.silent,!1,!0);return Ie(i)},Ie=e=>Ve(e.toString().split(`
`).map(t=>U(()=>JSON.parse(t))).map(t=>t?.data?.advisory).filter(t=>t!==void 0).map(t=>({module_name:t.module_name,vulnerable_versions:t.vulnerable_versions,patched_versions:t.patched_versions})),t=>t.module_name);var oe=e=>{let t=W(e),{__metadata:o}=t;return delete t.__metadata,Object.entries(t).reduce((n,[r,s])=>(r.split(", ").forEach(i=>{n[i]=s}),n),H({},"__metadata",o))},ne=(e,t,o,n)=>(e.version=o,e.resolution=`${t}@npm:${o}`,e.dependencies=JSON.parse(u(n,["view",`${t}@${o}`,"dependencies","--json"],process.cwd(),!0,!1)||"null")||void 0,delete e.checksum,e),re=e=>{let t=Object.entries(e).reduce((n,[r,{resolution:s}])=>((n[s]||(n[s]=[])).push(r),n),{}),o=Object.values(e).reduce((n,r)=>{let s=t[r.resolution].join(", ");return n[s]=r,n},{__metadata:e.__metadata||{version:5,cacheKey:8}});return`# This file is generated by running "yarn install" inside your project.
# Manual changes might be lost - proceed with caution!

${q(o,{quotingType:'"',flowLevel:-1,lineWidth:-1}).replace(/\n([^\s"].+):\n/g,`
"$1":
`).replace(/\n(\S)/g,`

$1`).replace(/resolution: ([^\n"]+)/g,'resolution: "$1"')}`},se=(e,t,o)=>{let r=f(h(e,{"audit-level":"severity",level:"severity",groups:{key:"environment",values:{dependencies:"production"}},only:{key:"environment",values:{prod:"production"}}}),"groups","verbose"),s=u(o.yarn,["npm","audit","--all","--json","--recursive",...r],t,!!e.silent,!1,!1);return Me(s)},Me=e=>Object.values(JSON.parse(e).advisories).reduce((t,{vulnerable_versions:o,module_name:n,patched_versions:r})=>(t[n]={patched_versions:r,vulnerable_versions:o,module_name:n},t),{});var ie=e=>{if(e.includes("yarn lockfile v1"))return"yarn1";if(e.includes("__metadata"))return"yarn2"},Ge=(e,t)=>{if(t===void 0)throw new Error("Unsupported lockfile format");return t==="yarn2"?oe(e):Q(e)},Be=(e,t)=>t==="yarn2"?re(e):ee(e),Je=(e,t,{flags:o,bins:n},r)=>{if(Object.keys(t).length===0)return!o.silent&&console.log("Audit check found no issues"),e;let s=[];for(let i of Object.keys(e)){let[,c,T]=/^(@?[^@]+)@(?:\w+:)?(.+)$/.exec(i)||[],d=t[c];if(!d)continue;let g=e[i];if(j.satisfies(g.version,d.vulnerable_versions)){let y=j.minVersion(d.patched_versions)?.format();if(y===void 0){console.error("Can't find satisfactory version for",d.module_name,d.patched_versions);continue}if(!j.satisfies(y,T)&&!o.force){console.error("Can't find patched version that satisfies",i,"in",d.patched_versions);continue}s.push(`${c}@${y}`),r==="yarn1"?X(g,c,y):ne(g,c,y,n.npm)}}return!o.silent&&console.log("Upgraded deps:",s.length>0?s.join(", "):"<none>"),e},Ue=({flags:e,temp:t,bins:o},n)=>n==="yarn2"?se(e,t,o):te(e,t,o),F={_parse:Ge,_audit:Ue,_patch:Je,_format:Be},ae=(...e)=>F._parse(...e),ce=(...e)=>F._audit(...e),le=(...e)=>F._patch(...e),pe=(...e)=>F._format(...e);var O=({ctx:e,temp:t,flags:o})=>{let n=b();e.bins={yarn:M(),npm:G(o["npm-path"])},e.versions={node:x("node"),npm:x(e.bins.npm),yarn:x(e.bins.yarn),yaf:n.version,yafLatest:u(e.bins.npm,["view",n.name,"version"],process.cwd(),!0,!1)}},A=({temp:e,cwd:t,flags:o,bins:n,versions:r,manifest:s})=>{if(o.silent)return;let i=!!s.workspaces;i&&_.parse(r.npm)?.major<7&&console.warn("This project looks like monorepo, so it's recommended to use `npm v7+` to process workspaces"),_.gt(r.yafLatest,r.yaf)&&console.warn(`yarn-audit-fix version ${r.yaf} is out of date. Install the latest ${r.yafLatest} for better results`),console.log(JSON.stringify({isMonorepo:i,bins:n,versions:r,temp:e,cwd:t,flags:o},void 0,2).replace(/[",:{}]/g,""))},R=({cwd:e,temp:t})=>{l.copyFileSync(a(e,"yarn.lock"),a(t,"yarn.lock")),l.copyFileSync(a(e,"package.json"),a(t,"package.json")),l.existsSync(a(e,".npmrc"))&&l.copyFileSync(a(e,".npmrc"),a(t,".npmrc")),l.existsSync(a(e,".yarnrc"))&&l.copyFileSync(a(e,".yarnrc"),a(t,".yarnrc"))},E=({temp:e,flags:t,cwd:o,manifest:n})=>{let r=I(t.symlink),s=B(o,n);[a(o,"node_modules"),a(o,".yarn"),...s.map(c=>qe(c))].forEach(c=>{let T=He(o,c),d=a(o,T),g=a(e,T);l.existsSync(d)&&l.createSymlinkSync(d,g,r)})},de=({temp:e,flags:t})=>{let o=ue.yarnToNpm(e,!0);l.writeFileSync(a(e,"package-lock.json"),o),t.flow!=="patch"&&l.removeSync(a(e,"yarn.lock"))},fe=({temp:e,flags:t,bins:o})=>{let s=["audit","fix",...f({...{"package-lock-only":!0},...t},"audit-level","dry-run","force","loglevel","legacy-peer-deps","only","package-lock-only","registry","silent","verbose"),"--prefix",e];u(o.npm,s,e,t.silent)},me=({temp:e})=>{let t=ue.npmToYarn(e,!0);l.writeFileSync(a(e,"yarn.lock"),t)},C=({temp:e,flags:t})=>{t.dryRun||l.copyFileSync(a(e,"yarn.lock"),"yarn.lock")},Y=({cwd:e,flags:t,versions:o,bins:n})=>{t.dryRun||(_.gte(o.yarn,"2.0.0")?u(n.yarn,["install","--mode=update-lockfile"],e,t.silent):u(n.yarn,["install","--update-checksums",...f(t,"verbose","silent","registry","ignore-engines")],e,t.silent))},m=({temp:e})=>l.emptyDirSync(e),$=({flags:e,err:t})=>{!e.silent&&console.error(t),process.exitCode=t?.status|0||1},ge=({temp:e,ctx:t})=>{let o=a(e,"yarn.lock"),n=l.readFileSync(o,"utf-8"),r=ie(n),s=ae(n,r),i=ce(t,r),c=le(s,i,t,r);l.writeFileSync(o,pe(c,r))},D=({cwd:e,versions:t,flags:o})=>{let n=["yarn.lock","package.json"];(o.flow==="convert"||_.lt(t.yarn,"2.0.0"))&&n.push("node_modules"),n.forEach(r=>{if(!l.existsSync(a(e,r)))throw new Error(`not found: ${r}`)})};var Ke={main:["Resolve bins",O,"Runtime digest",A,"Verifying package structure...",D,"Preparing temp assets...",m,R,E,"Generating package-lock.json from yarn.lock...",de,"Applying npm audit fix...",fe,["Updating yarn.lock from package-lock.json...",me,C,m],"Installing deps update...",Y,"Done"],fallback:["Failure!",m,$]},ze={main:["Resolve bins",O,"Runtime digest",A,"Verifying package structure...",D,"Preparing temp assets...",m,R,E,["Patching yarn.lock with audit data...",ge,C,m],"Installing deps update...",Y,"Done"],fallback:["Failure!",m,$]},ye=(e="patch")=>{if(e==="convert")return Ke;if(e==="patch")return ze;throw new Error(`Unsupported flow: ${e}`)};var Xe=(e={})=>{let t=e.cwd||process.cwd(),o=L(Ze(t,"package.json")),n=J(t,e.temp),r={cwd:t,temp:n,flags:e,manifest:o,versions:{},bins:{}};return r.ctx=r,r},ke=(e,t)=>{for(let o of e.flat(5))typeof o=="string"?!t.flags.silent&&console.log(Qe.bold(o)):typeof o=="function"&&o(t)},Te=(e={},t)=>{if(e.V){console.log(b().version);return}let o=V(e),n=Xe(o),r=t||ye(o.flow);try{ke(r.main,n)}catch(s){throw n.err=s,!o.silent&&console.error(s.stderr?.toString?.()||s.stdout?.toString?.()||s.error||s.status||s),ke(r.fallback,n),s}},P=(e={},t)=>new Promise((o,n)=>{try{Te(e,t),o()}catch(r){n(r)}});P.sync=Te;var p=ve.env,tt=new et().addOption(new k("--audit-level [level]","Include only vulnerabilities with the specified level or higher").choices(["low","moderate","high","critical"]).default(p.YAF_AUDIT_LEVEL)).option("--cwd [path]","CWD. Defaults to `process.cwd()`",p.YAF_CWD).option("--dry-run [bool]","Get an idea of what audit fix will do",p.YAF_DRY_RUN).addOption(new k("--flow [flow]","Define how `yarn.lock` is modified").choices(["convert","patch"]).default(p.YAF_FLOW||"patch")).option("--force [bool]","Have audit fix install semver-major updates to toplevel dependencies, not just semver-compatible ones",p.YAF_FORCE).option("--ignore-engines [bool]","Ignore engines check",p.YAF_IGNORE_ENGINES).option("--loglevel [level]","Set custom log level",p.YAF_LOGLEVEL).option("--legacy-peer-deps [bool]","Accept an incorrect (potentially broken) deps resolution",p.YAF_LEGACY_PEER_DEPS).addOption(new k("--npm-path [path]","Switch to system default version of npm instead of package's own.").choices(["system","local"]).default(p.YAF_NPM_PATH||"system")).addOption(new k("--only [scope]","Set package updating scope").choices(["prod","dev"]).default(p.YAF_ONLY)).option("--package-lock-only [bool]","Run audit fix without modifying `node_modules`.",p.YAF_PACKAGE_LOCK_ONLY).option("--registry [registry]","Custom registry url",p.YAF_REGISTRY).option("--silent [bool]","Disable log output",p.YAF_SILENT).addOption(new k("--symlink","Define symlink type for `node_modules` assets").choices(["junction","dir"])).option("--temp [dir]","Directory for temporary assets").option("--verbose [bool]","Switch log level to verbose/debug",p.YAF_VERBOSE).option("--version, -v","Print current yarn-audit-fix version").allowUnknownOption().parse(ve.argv).opts();P.sync(tt);
//# sourceMappingURL=cli.mjs.map
