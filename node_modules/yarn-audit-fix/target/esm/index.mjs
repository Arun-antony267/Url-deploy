import{dirname as It,join as a,relative as Ut}from"node:path";import p from"fs-extra";import b from"semver";import pt from"synp";import _ from"semver";import H from"@yarnpkg/lockfile";import{keyBy as Vt}from"lodash-es";import yt from"node:crypto";import{createRequire as kt}from"node:module";import k,{dirname as Tt,resolve as xt}from"node:path";import{fileURLToPath as vt}from"node:url";import ht from"node:os";import bt from"chalk";import S from"fs-extra";import St from"fast-glob";import P from"js-yaml";import{reduce as Ft}from"lodash-es";var jt=St.sync,_t=kt(import.meta.url)("child_process"),{ensureDirSync:wt,readFileSync:Lt}=S,Rt=Tt(vt(import.meta.url)),l=(t,e,r,n=!1,o=!0,s=!1)=>{!n&&console.log(bt.bold("invoke"),t,...e);let i=o?["inherit","inherit","inherit"]:[null,null,null],c=_t.spawnSync(t,e,{cwd:r,stdio:i});if(!s&&(c.error||c.status))throw c;return String(c.stdout?.toString().trim())},Ot=(t,e,r,n)=>e!=="false"&&!r.includes(t)&&(n.length===0||n.includes(t)),Ct=t=>(t.length===1?"-":"--")+t,At=t=>t.replace(/([\da-z]|(?=[A-Z]))([A-Z])/g,"$1-$2").toLowerCase(),D=t=>Object.keys(t).reduce((e,r)=>(e[At(r)]=t[r],e),{}),u=(t,...e)=>Object.keys(t).reduce((r,n)=>{let o=["_","--"],s=t[n],i=Ct(n);return Ot(n,s,o,e)&&(r.push(i),s!==!0&&r.push(s)),r},[]),T=(t,e)=>Ft(t,(r,n,o)=>{let s=e[o],i=o,c=n;return s&&(typeof s=="string"?i=s:(i=s?.key??i,c=s?.value??s?.values?.[n]??c)),r[i]=c,r},{}),F=()=>process.platform==="win32"||/^(msys|cygwin)$/.test(process.env.OSTYPE),M=t=>t||(F()?"junction":"dir"),N=()=>F()?"yarn.cmd":"yarn",Et=t=>G(`./node_modules/.bin/${t}`),Y=(t="system",e=F())=>{let r=e?"npm.cmd":"npm";return t==="system"?r:t==="local"?Et(r):t},B=(t,e)=>{let r=e.workspaces;return r&&r.packages&&(r=r.packages),!r||r.length===0?[]:jt(r.map(n=>n.replace(/\/?$/,"/package.json")),{cwd:t,onlyFiles:!0,absolute:!0,gitignore:!0})},j=t=>JSON.parse(Lt(t).toString("utf-8").trim()),$t=t=>(wt(t),t),J=(t,e)=>e?$t(xt(t,e)):S.mkdtempSync(k.join(ht.tmpdir(),`tempy-${yt.randomBytes(16).toString("hex")}`)),I=t=>{try{return t()}catch{return null}},U=t=>{try{return P.load(t)}catch(e){throw new Error(`YAML required: ${e}`)}},q=P.dump,x=(t,e=process.cwd())=>l(t,["--version"],e,!0,!1),v=()=>j(G("package.json")),W=(t,e,r)=>Object.defineProperty(t,e,{value:r,enumerable:!1}),z=(t,e)=>{if(S.existsSync(k.join(t,e)))return t;let r=k.resolve(t,"..");return t===r?null:z(r,e)},G=(t,e=Rt)=>{let r=z(e,t);return r?k.join(r,t):null};var K=t=>{let e=H.parse(t);if(e.type!=="success")throw new Error("Merge conflict in yarn lockfile, aborting");return e.object},Z=(t,e,r)=>(t.version=r,t.dependencies={},t.integrity="",t.resolved="",t),Q=t=>H.stringify(t),X=(t,e,r)=>{let n=t.reporter==="npm"?r.npm:r.yarn,s=u(T(t,{"audit-level":"level",only:{key:"groups",values:{prod:"dependencies",dev:"devDependencies"}}}),"groups","verbose","level"),i=l(n,["audit","--json",...s],e,!!t.silent,!1,!0);return Pt(i)},Pt=t=>Vt(t.toString().split(`
`).map(e=>I(()=>JSON.parse(e))).map(e=>e?.data?.advisory).filter(e=>e!==void 0).map(e=>({module_name:e.module_name,vulnerable_versions:e.vulnerable_versions,patched_versions:e.patched_versions})),e=>e.module_name);var tt=t=>{let e=U(t),{__metadata:r}=e;return delete e.__metadata,Object.entries(e).reduce((n,[o,s])=>(o.split(", ").forEach(i=>{n[i]=s}),n),W({},"__metadata",r))},et=(t,e,r,n)=>(t.version=r,t.resolution=`${e}@npm:${r}`,t.dependencies=JSON.parse(l(n,["view",`${e}@${r}`,"dependencies","--json"],process.cwd(),!0,!1)||"null")||void 0,delete t.checksum,t),rt=t=>{let e=Object.entries(t).reduce((n,[o,{resolution:s}])=>((n[s]||(n[s]=[])).push(o),n),{}),r=Object.values(t).reduce((n,o)=>{let s=e[o.resolution].join(", ");return n[s]=o,n},{__metadata:t.__metadata||{version:5,cacheKey:8}});return`# This file is generated by running "yarn install" inside your project.
# Manual changes might be lost - proceed with caution!

${q(r,{quotingType:'"',flowLevel:-1,lineWidth:-1}).replace(/\n([^\s"].+):\n/g,`
"$1":
`).replace(/\n(\S)/g,`

$1`).replace(/resolution: ([^\n"]+)/g,'resolution: "$1"')}`},nt=(t,e,r)=>{let o=u(T(t,{"audit-level":"severity",level:"severity",groups:{key:"environment",values:{dependencies:"production"}},only:{key:"environment",values:{prod:"production"}}}),"groups","verbose"),s=l(r.yarn,["npm","audit","--all","--json","--recursive",...o],e,!!t.silent,!1,!1);return Dt(s)},Dt=t=>Object.values(JSON.parse(t).advisories).reduce((e,{vulnerable_versions:r,module_name:n,patched_versions:o})=>(e[n]={patched_versions:o,vulnerable_versions:r,module_name:n},e),{});var ot=t=>{if(t.includes("yarn lockfile v1"))return"yarn1";if(t.includes("__metadata"))return"yarn2"},Mt=(t,e)=>{if(e===void 0)throw new Error("Unsupported lockfile format");return e==="yarn2"?tt(t):K(t)},Nt=(t,e)=>e==="yarn2"?rt(t):Q(t),Yt=(t,e,{flags:r,bins:n},o)=>{if(Object.keys(e).length===0)return!r.silent&&console.log("Audit check found no issues"),t;let s=[];for(let i of Object.keys(t)){let[,c,y]=/^(@?[^@]+)@(?:\w+:)?(.+)$/.exec(i)||[],f=e[c];if(!f)continue;let g=t[i];if(_.satisfies(g.version,f.vulnerable_versions)){let d=_.minVersion(f.patched_versions)?.format();if(d===void 0){console.error("Can't find satisfactory version for",f.module_name,f.patched_versions);continue}if(!_.satisfies(d,y)&&!r.force){console.error("Can't find patched version that satisfies",i,"in",f.patched_versions);continue}s.push(`${c}@${d}`),o==="yarn1"?Z(g,c,d):et(g,c,d,n.npm)}}return!r.silent&&console.log("Upgraded deps:",s.length>0?s.join(", "):"<none>"),t},Bt=({flags:t,temp:e,bins:r},n)=>n==="yarn2"?nt(t,e,r):X(t,e,r),h={_parse:Mt,_audit:Bt,_patch:Yt,_format:Nt},st=(...t)=>h._parse(...t),it=(...t)=>h._audit(...t),at=(...t)=>h._patch(...t),ct=(...t)=>h._format(...t);var w=({ctx:t,temp:e,flags:r})=>{let n=v();t.bins={yarn:N(),npm:Y(r["npm-path"])},t.versions={node:x("node"),npm:x(t.bins.npm),yarn:x(t.bins.yarn),yaf:n.version,yafLatest:l(t.bins.npm,["view",n.name,"version"],process.cwd(),!0,!1)}},L=({temp:t,cwd:e,flags:r,bins:n,versions:o,manifest:s})=>{if(r.silent)return;let i=!!s.workspaces;i&&b.parse(o.npm)?.major<7&&console.warn("This project looks like monorepo, so it's recommended to use `npm v7+` to process workspaces"),b.gt(o.yafLatest,o.yaf)&&console.warn(`yarn-audit-fix version ${o.yaf} is out of date. Install the latest ${o.yafLatest} for better results`),console.log(JSON.stringify({isMonorepo:i,bins:n,versions:o,temp:t,cwd:e,flags:r},void 0,2).replace(/[",:{}]/g,""))},R=({cwd:t,temp:e})=>{p.copyFileSync(a(t,"yarn.lock"),a(e,"yarn.lock")),p.copyFileSync(a(t,"package.json"),a(e,"package.json")),p.existsSync(a(t,".npmrc"))&&p.copyFileSync(a(t,".npmrc"),a(e,".npmrc")),p.existsSync(a(t,".yarnrc"))&&p.copyFileSync(a(t,".yarnrc"),a(e,".yarnrc"))},O=({temp:t,flags:e,cwd:r,manifest:n})=>{let o=M(e.symlink),s=B(r,n);[a(r,"node_modules"),a(r,".yarn"),...s.map(c=>It(c))].forEach(c=>{let y=Ut(r,c),f=a(r,y),g=a(t,y);p.existsSync(f)&&p.createSymlinkSync(f,g,o)})},lt=({temp:t,flags:e})=>{let r=pt.yarnToNpm(t,!0);p.writeFileSync(a(t,"package-lock.json"),r),e.flow!=="patch"&&p.removeSync(a(t,"yarn.lock"))},ft=({temp:t,flags:e,bins:r})=>{let s=["audit","fix",...u({...{"package-lock-only":!0},...e},"audit-level","dry-run","force","loglevel","legacy-peer-deps","only","package-lock-only","registry","silent","verbose"),"--prefix",t];l(r.npm,s,t,e.silent)},ut=({temp:t})=>{let e=pt.npmToYarn(t,!0);p.writeFileSync(a(t,"yarn.lock"),e)},C=({temp:t,flags:e})=>{e.dryRun||p.copyFileSync(a(t,"yarn.lock"),"yarn.lock")},A=({cwd:t,flags:e,versions:r,bins:n})=>{e.dryRun||(b.gte(r.yarn,"2.0.0")?l(n.yarn,["install","--mode=update-lockfile"],t,e.silent):l(n.yarn,["install","--update-checksums",...u(e,"verbose","silent","registry","ignore-engines")],t,e.silent))},m=({temp:t})=>p.emptyDirSync(t),E=({flags:t,err:e})=>{!t.silent&&console.error(e),process.exitCode=e?.status|0||1},mt=({temp:t,ctx:e})=>{let r=a(t,"yarn.lock"),n=p.readFileSync(r,"utf-8"),o=ot(n),s=st(n,o),i=it(e,o),c=at(s,i,e,o);p.writeFileSync(r,ct(c,o))},$=({cwd:t,versions:e,flags:r})=>{let n=["yarn.lock","package.json"];(r.flow==="convert"||b.lt(e.yarn,"2.0.0"))&&n.push("node_modules"),n.forEach(o=>{if(!p.existsSync(a(t,o)))throw new Error(`not found: ${o}`)})};var qt={main:["Resolve bins",w,"Runtime digest",L,"Verifying package structure...",$,"Preparing temp assets...",m,R,O,"Generating package-lock.json from yarn.lock...",lt,"Applying npm audit fix...",ft,["Updating yarn.lock from package-lock.json...",ut,C,m],"Installing deps update...",A,"Done"],fallback:["Failure!",m,E]},Wt={main:["Resolve bins",w,"Runtime digest",L,"Verifying package structure...",$,"Preparing temp assets...",m,R,O,["Patching yarn.lock with audit data...",mt,C,m],"Installing deps update...",A,"Done"],fallback:["Failure!",m,E]},V=(t="patch")=>{if(t==="convert")return qt;if(t==="patch")return Wt;throw new Error(`Unsupported flow: ${t}`)};import{join as zt}from"node:path";import Gt from"chalk";var Ht=(t={})=>{let e=t.cwd||process.cwd(),r=j(zt(e,"package.json")),n=J(e,t.temp),o={cwd:e,temp:n,flags:t,manifest:r,versions:{},bins:{}};return o.ctx=o,o},gt=(t,e)=>{for(let r of t.flat(5))typeof r=="string"?!e.flags.silent&&console.log(Gt.bold(r)):typeof r=="function"&&r(e)},dt=(t={},e)=>{if(t.V){console.log(v().version);return}let r=D(t),n=Ht(r),o=e||V(r.flow);try{gt(o.main,n)}catch(s){throw n.err=s,!r.silent&&console.error(s.stderr?.toString?.()||s.stdout?.toString?.()||s.error||s.status||s),gt(o.fallback,n),s}},Kt=(t={},e)=>new Promise((r,n)=>{try{dt(t,e),r()}catch(o){n(o)}});Kt.sync=dt;export{Bt as _audit,Nt as _format,h as _internal,Mt as _parse,Yt as _patch,W as addHiddenProp,I as attempt,it as audit,m as clear,O as createSymlinks,R as createTempAssets,$t as ensureDir,gt as exec,E as exit,ct as format,u as formatFlags,q as formatYaml,x as getBinVersion,Et as getClosestBin,Ht as getContext,V as getFlow,ot as getLockfileType,Y as getNpm,v as getSelfManifest,M as getSymlinkType,J as getTemp,B as getWorkspaces,N as getYarn,l as invoke,F as isWindows,T as mapFlags,D as normalizeFlags,ft as npmAuditFix,st as parse,U as parseYaml,at as patch,mt as patchLockfile,L as printRuntimeDigest,j as readJson,w as resolveBins,Kt as run,dt as runSync,C as syncLockfile,$ as verify,ut as yarnImport,A as yarnInstall,lt as yarnLockToPkgLock};
//# sourceMappingURL=index.mjs.map
