import { SymlinkType } from 'fs-extra';
import yaml from 'js-yaml';
import { TFlags, TFlagsMapping } from './ifaces';
declare const cp: any;
export declare const invoke: (cmd: string, args: string[], cwd: string, silent?: boolean, inherit?: boolean, skipError?: boolean) => string | ReturnType<typeof cp.spawnSync>;
export declare const normalizeFlags: (flags: TFlags) => TFlags;
export declare const formatFlags: (flags: TFlags, ...picklist: string[]) => string[];
export declare const mapFlags: (flags: TFlags, mapping: TFlagsMapping) => TFlags;
export declare const isWindows: () => boolean;
export declare const getSymlinkType: (type?: string) => SymlinkType;
export declare const getYarn: () => string;
export declare const getClosestBin: (cmd: string) => string;
export declare const getNpm: (npmPath?: string, isWin?: boolean) => string;
export declare const getWorkspaces: (cwd: string, manifest: Record<string, any>) => string[];
export declare const readJson: (path: string) => any;
export declare const ensureDir: (dir: string) => string;
export declare const getTemp: (cwd: string, temp?: string) => string;
export declare const attempt: <T>(f: () => T) => T | null;
export declare const parseYaml: <T = Record<string, any>>(contents: string) => T;
export declare const formatYaml: typeof yaml.dump;
export declare const getBinVersion: (bin: string, cwd?: string) => string;
export declare const getSelfManifest: () => any;
export declare const addHiddenProp: (obj: Record<string, any>, prop: string, value: any) => Record<string, any>;
export {};
