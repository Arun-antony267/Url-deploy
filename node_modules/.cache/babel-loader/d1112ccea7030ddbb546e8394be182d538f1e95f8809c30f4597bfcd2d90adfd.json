{"ast":null,"code":"// Make a function which:\n// - First tries to require the name\n// - Then falls back to global lookup\nvar fromGlobal = require(\"./fromGlobal\");\nvar fromRequireContext = require(\"./fromRequireContext\");\nmodule.exports = function (reqctxs) {\n  var fromCtxs = reqctxs.map(reqctx => fromRequireContext(reqctx));\n  return function (className) {\n    var component;\n    try {\n      var index = 0,\n        fromCtx,\n        firstErr;\n      do {\n        fromCtx = fromCtxs[index];\n        try {\n          // `require` will raise an error if this className isn't found:\n          component = fromCtx(className);\n        } catch (fromCtxErr) {\n          if (!firstErr) {\n            firstErr = fromCtxErr;\n          }\n        }\n        index += 1;\n      } while (index < fromCtxs.length);\n      if (!component) throw firstErr;\n    } catch (firstErr) {\n      // fallback to global:\n      try {\n        component = fromGlobal(className);\n      } catch (secondErr) {\n        console.error(firstErr);\n        console.error(secondErr);\n      }\n    }\n    return component;\n  };\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}